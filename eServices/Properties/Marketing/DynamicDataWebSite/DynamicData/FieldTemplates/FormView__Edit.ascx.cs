using DynamicDataLibrary;
using DynamicDataLibrary.Attributes;
using DynamicDataLibrary.ModelRelated;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Web.DynamicData;
using System.Web.Routing;
using System.Web.UI.WebControls;
using System.Linq.Dynamic;
using DynamicDataModel.Model;
using System.ComponentModel;
using NotAClue.Web.DynamicData;

using EntityDataSourceContextCreatingEventArgs = Microsoft.AspNet.EntityDataSource.EntityDataSourceContextCreatingEventArgs;

namespace DynamicDataWebSite
{
    public partial class FormView_EditField : FieldTemplateUserControl
    {
        protected MetaTable table;

        public bool EnableDelete { get; set; }

        public bool EnableUpdate { get; set; }

        public bool EnableInsert { get; set; }

        public string[] DisplayColumns { get; set; }

        protected void Page_Init(object sender, EventArgs e)
        {
            var metaChildColumn = Column as MetaChildrenColumn;
            var metaForeignKeyColumn = metaChildColumn != null ? metaChildColumn.ColumnInOtherTable as MetaForeignKeyColumn : null;

            var metaChildForeignKeyColumn = Column as MetaForeignKeyColumn;

            //One to Many relation
            if (metaChildColumn != null && metaForeignKeyColumn != null)
            {
                this.GridView1.SetMetaTable(metaChildColumn.ChildTable);

                // get an instance of the MetaTable
                //table = GridDataSource.GetTable();
                table = metaChildColumn.ChildTable;
            }
            // One to One relation
            else if (metaChildForeignKeyColumn != null)
            {
                this.GridView1.SetMetaTable(metaChildForeignKeyColumn.ParentTable);

                // get an instance of the MetaTable
                //table = GridDataSource.GetTable();
                table = metaChildForeignKeyColumn.ParentTable;
            }
            else
            {
                // throw an error if set on column other than MetaChildrenColumns
                throw new InvalidOperationException("The GridView FieldTemplate can only be used with One-To-One or One-To-Many relation!");
            }
            
            bool canInsert = DynamicDataLibrary.AuthorizationManager.CheckUrlAccessForPrincipal(table.GetActionPath(PageAction.Insert), Context.User);
            bool canDelete = DynamicDataLibrary.AuthorizationManager.CheckUrlAccessForPrincipal(
                table.GetActionPath(PageAction.Insert)/*.Replace("Insert", "Delete")*/, Context.User);
            bool canEdit = DynamicDataLibrary.AuthorizationManager.CheckUrlAccessForPrincipal(table.GetActionPath(PageAction.Edit), Context.User);

            var attribute = Column.Attributes.OfType<ShowColumnsAttribute>().SingleOrDefault();

            if (attribute != null)
            {
                EnableInsert = attribute.EnableInsert && canInsert || attribute.EnableInsertEvenWithNoPermission;
                EnableUpdate = attribute.EnableUpdate && canEdit || attribute.EnableUpdateEvenWithNoPermission;
                EnableDelete = attribute.EnableDelete && canEdit || attribute.EnableDeleteEvenWithNoPermission;

                if (attribute.DisplayColumns.Length > 0)
                    DisplayColumns = attribute.DisplayColumns;
            }


            //GridDataSource.ContextTypeName = metaChildColumn.ChildTable.DataContextType.Name;
            //GridDataSource.ContextTypeName = "DynamicDataModel.Model.Entities";

            //GridDataSource.TableName = metaChildColumn.ChildTable.Name;
            GridDataSource.EntitySetName = table.Name;

            // enable update, delete and insert
            GridDataSource.EnableUpdate = EnableUpdate;
            //GridView1.AutoGenerateEditButton = EnableUpdate;
            GridDataSource.EnableDelete = EnableDelete;
            //GridView1.AutoGenerateDeleteButton = EnableDelete;
            GridDataSource.EnableInsert = EnableInsert;
            LinkButtonNew.Visible = EnableInsert;

            Initialize();

        }

        private void Initialize()
        {
            // Generate the columns as we can't rely on 
            // DynamicDataManager to do it for us.
            GridView1.ColumnsGenerator = new FieldTemplateRowGenerator(table, DisplayColumns);

            // setup the GridView's DataKeys
            String[] keys = new String[table.PrimaryKeyColumns.Count];
            int i = 0;
            foreach (var keyColumn in table.PrimaryKeyColumns)
            {
                keys[i] = keyColumn.Name;
                i++;
            }
            GridView1.DataKeyNames = keys;

            GridDataSource.AutoGenerateWhereClause = true;

            //To Order By:
            var displayColumnAtt = table
                .Attributes.OfType<DisplayColumnAttribute>().FirstOrDefault();
            if (displayColumnAtt != null)
            {
                GridDataSource.OrderBy = "it." + displayColumnAtt.SortColumn;
                if (displayColumnAtt.SortDescending)
                    GridDataSource.OrderBy += " desc";
            }
            else
                GridDataSource.OrderBy =
                    String.Concat(table.PrimaryKeyColumns.Select(c => "it." + c.Name + " desc ,")).TrimEnd(',');
        }
        
        protected void GridDataSource_ContextCreating(object sender, EntityDataSourceContextCreatingEventArgs e)
        {
            e.Context = ((IObjectContextAdapter)new Entities(true, Global.DefaultModel)).ObjectContext;
        }

        protected void GridView1_RowCreated(object sender, GridViewRowEventArgs e)
        {
            //Not a good way to put the first column at the end. But this what could be done!
            if (e.Row.RowType != DataControlRowType.Pager)
            {
                GridViewRow row = e.Row;
                // Intitialize TableCell list
                List<TableCell> columns = new List<TableCell>();
                foreach (DataControlField column in GridView1.Columns)
                {
                    //Get the first Cell /Column
                    TableCell cell = row.Cells[0];
                    // Then Remove it after
                    row.Cells.Remove(cell);
                    //And Add it to the List Collections

                    if (EnableUpdate || EnableDelete)
                    {
                        columns.Add(cell);
                        //row.FindControl("LinkButtonEdit")

                        System.Web.UI.Control control1 = cell.MyFindControl("LinkButtonEdit");
                        System.Web.UI.Control control2 = cell.MyFindControl("LinkButtonDelete");
                        if (control1 != null)
                            control1.Visible = EnableUpdate;
                        if (control2 != null)
                            control2.Visible = EnableDelete;

                    }
                }
                // Add cells
                row.Cells.AddRange(columns.ToArray());


                if (row.DataItem != null)
                {
                    //object item = EntityDataSourceHelper.GetItemObject(e.Row.DataItem);

                    ContributionLimitedToCreatorAttribute contributionLimitedToCreator
                        = table.GetAttribute<ContributionLimitedToCreatorAttribute>();
                    if (contributionLimitedToCreator != null)
                    {
                        if (!contributionLimitedToCreator.CanContributeOnDataItem(row.DataItem))
                        {
                            TableCell cell = row.Cells[row.Cells.Count - 1];
                            cell.Controls.Clear();
                        }
                    }

                    #region Added to Force the grid view to correctly evaluate the forien keys!!!
                    //var metaChildColumn = Column as MetaChildrenColumn;
                    //var metaChildForeignKeyColumn = Column as MetaForeignKeyColumn;
                    //MetaTable table = metaChildColumn != null ? metaChildColumn.Table : metaChildForeignKeyColumn.ParentTable;
                    object item = EntityDataSourceHelper.GetItemObject(e.Row.DataItem);
                    foreach (string foreignKeyColumnName in table.ForeignKeyColumnsNames.Split(','))
                    {
                        System.Reflection.PropertyInfo pi = item.GetType().GetProperty(foreignKeyColumnName);
                        if (pi != null)
                            pi.GetValue(item);
                    }
                    #endregion
                }
            }
        }


        protected void GridView1_RowDataBound(Object sender, GridViewRowEventArgs e)
        {
            GridViewRow row = e.Row;
        }

        //protected void GridView1_PreRender(object sender, EventArgs e)
        //{
        //    foreach (GridViewRow row in this.GridView1.Rows)
        //    {
        //        if (row.RowType != DataControlRowType.Pager)
        //        {
        //            if (row.DataItem != null)
        //            {
        //                ContributionLimitedToCreatorAttribute contributionLimitedToCreator = table.GetAttribute<ContributionLimitedToCreatorAttribute>();
        //                if (contributionLimitedToCreator != null)
        //                {
        //                    if (!contributionLimitedToCreator.CanContributeOnDataItem(row.DataItem))
        //                    {
        //                        TableCell cell = row.Cells[row.Cells.Count - 1];
        //                        cell.Controls.Clear();
        //                        //System.Web.UI.Control control1 = cell.MyFindControl("LinkButtonEdit");
        //                        //System.Web.UI.Control control2 = cell.MyFindControl("LinkButtonDelete");
        //                        //if (control1 != null)
        //                        //    control1.Visible = false;
        //                        //if (control2 != null)
        //                        //    control2.Visible = false;
        //                    }
        //                }
        //            }
        //        }
        //    }
        //}


        protected override void OnDataBinding(EventArgs e)
        {
            base.OnDataBinding(e);

            var metaChildrenColumn = Column as MetaChildrenColumn;
            var metaChildForeignKeyColumn = Column as MetaForeignKeyColumn;

            string[] columns = null;

            // get the association attributes associated with MetaChildrenColumns
            AssociationKeysAttribute keyAssociation = null;
            System.Data.Linq.Mapping.AssociationAttribute association = null;

            if (metaChildrenColumn != null)
            {
                columns = (metaChildrenColumn.ColumnInOtherTable as MetaForeignKeyColumn).ForeignKeyNames.ToArray();
                keyAssociation = metaChildrenColumn.Attributes.OfType<AssociationKeysAttribute>().FirstOrDefault();
                association = metaChildrenColumn.Attributes.OfType<System.Data.Linq.Mapping.AssociationAttribute>().FirstOrDefault();
            }
            else if (metaChildForeignKeyColumn != null)
            {
                columns = metaChildForeignKeyColumn.ParentTable.PrimaryKeyColumns.Select(c => c.Name).ToArray();
                keyAssociation = metaChildForeignKeyColumn.Attributes.OfType<AssociationKeysAttribute>().FirstOrDefault();
                association = metaChildForeignKeyColumn.Attributes.OfType<System.Data.Linq.Mapping.AssociationAttribute>().FirstOrDefault();
            }

            if (columns != null && (association != null || keyAssociation != null))
            {
                // get keys ThisKey and OtherKey into Pairs
                var keys = new Dictionary<String, String>();
                var separator = new char[] { ',' };
                var thisKeys = keyAssociation != null ? keyAssociation.ThisKey.Split(separator) : association.ThisKey.Split(separator);
                var otherKeys = keyAssociation != null ? keyAssociation.OtherKey.Split(separator) : association.OtherKey.Split(separator);
                for (int i = 0; i < thisKeys.Length; i++)
                {
                    keys.Add(otherKeys[i], thisKeys[i]);
                }

                // setup the where clause 
                // support composite foreign keys
                GridDataSource.WhereParameters.Clear();
                foreach (String fkName in columns)
                {
                    // get the current pk column
                    var fkColumn = table.GetColumn(fkName);

                    // setup parameter
                    var param = new Parameter();
                    param.Name = fkColumn.Name;
                    param.Type = fkColumn.TypeCode;

                    // get the PK value for this FK column using the fk pk pairs
                    param.DefaultValue = Request.QueryString[keys[fkName]];

                    // add the where clause
                    GridDataSource.WhereParameters.Add(param);
                }
            }
            var displayColumnAtt = table
                .Attributes.OfType<DisplayColumnAttribute>().FirstOrDefault();
            if (displayColumnAtt != null)
            {
                GridDataSource.OrderBy = "it." + displayColumnAtt.SortColumn;
                if (displayColumnAtt.SortDescending)
                    GridDataSource.OrderBy += " desc";
            }
            else
                GridDataSource.OrderBy =
                    String.Concat(table.PrimaryKeyColumns.Select(c => "it." + c.Name + " desc ,")).TrimEnd(',');

            // doing the work of this above because we can't
            // set the DynamicDataManager table or where values
            //DynamicDataManager1.RegisterControl(GridView1, false);
        }

        protected void LinkButtonNew_Click(object sender, EventArgs e)
        {
            NewRecordPanel.Visible = true;
            LinkButtonNew.Visible = false;
            this.GridView1.DataBind();
        }

        protected void FormView1_DataBound(object sender, EventArgs e)
        {
            (this.FormView1.FindControl("DynamicEntityInsert") as DynamicEntity).ValidationGroup = table.Name;
            (this.FormView1.FindControl("LinkButtonInsert") as LinkButton).ValidationGroup = table.Name;

            this.ValidationSummary1.ValidationGroup = table.Name;
            this.GridViewValidator.ValidationGroup = table.Name;
        }
        protected void FormView1_ItemInserted(object sender, FormViewInsertedEventArgs e)
        {
            NewRecordPanel.Visible = false;
            LinkButtonNew.Visible = true;
            GridView1.DataBind();
        }
        protected void FormView1_ItemInserting(object sender, FormViewInsertEventArgs e)
        {
            var metaChildrenColumn = Column as MetaChildrenColumn;
            var metaForeignKeyColumn = metaChildrenColumn.ColumnInOtherTable as MetaForeignKeyColumn;

            // get the association attributes associated with MetaChildrenColumns
            AssociationKeysAttribute keyAssociation = metaChildrenColumn.Attributes.
                OfType<AssociationKeysAttribute>().FirstOrDefault();
            System.Data.Linq.Mapping.AssociationAttribute association = metaChildrenColumn.Attributes.
                OfType<System.Data.Linq.Mapping.AssociationAttribute>().FirstOrDefault();

            if (metaForeignKeyColumn != null && (association != null || keyAssociation != null))
            {
                // get keys ThisKey and OtherKey into Pairs
                var keys = new Dictionary<String, String>();
                var separator = new char[] { ',' };
                var thisKeys = keyAssociation != null ? keyAssociation.ThisKey.Split(separator) : association.ThisKey.Split(separator);
                var otherKeys = keyAssociation != null ? keyAssociation.OtherKey.Split(separator) : association.OtherKey.Split(separator);
                for (int i = 0; i < thisKeys.Length; i++)
                {
                    keys.Add(otherKeys[i], thisKeys[i]);
                }
                foreach (String fkName in metaForeignKeyColumn.ForeignKeyNames)
                {
                    // get the current pk column
                    var fkColumn = metaChildrenColumn.ChildTable.GetColumn(fkName);

                    e.Values[fkColumn.Name] = Request.QueryString[keys[fkName]];
                }
            }
        }

        protected void LinkButtonCancel_Click(object sender, EventArgs e)
        {
            NewRecordPanel.Visible = false;
            LinkButtonNew.Visible = true;
            this.GridView1.DataBind();
        }
    }
}

//Source: http://csharpbits.notaclue.net/2008/08/dynamic-data-and-field-templates.html